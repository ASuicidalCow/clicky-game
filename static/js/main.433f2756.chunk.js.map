{"version":3,"sources":["component/Card/Card.jsx","component/Footer/Footer.jsx","component/Header/Header.jsx","component/Navbar/Navbar.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Card","clickHandler","id","image","name","className","src","alt","onClick","Footer","Header","Navbar","message","score","topScore","href","App","removeAnimation","element","document","getElementById","state","isGuessCorrect","classList","remove","addAnimation","isCorrect","add","toggleAnimation","setTimeout","handleSaveClick","tilez","tiles","tileClicked","filter","tile","clicked","handleIncorrectClick","handleCorrectClick","randomizeCharacters","setState","characters","sort","a","b","Math","random","maxScore","messageClass","resetGame","is","i","length","this","classname","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.433f2756.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Card ({ clickHandler, id, image, name }){\r\n    return(\r\n        <div className=\"card-holder\">\r\n            <img\r\n              src={image}\r\n              alt={name}\r\n              className=\"card-select grow img-thumbnail m-2 pointer\"\r\n              onClick={() => clickHandler(id)}\r\n              />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react'\r\n\r\nfunction Footer(){\r\n    return(\r\n        <div className = \" colors position-relative footer footer-100 footer-mgn navbar p-0\">\r\n            <span className=\"text-muted\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react'\r\n\r\nfunction Header() {\r\n    return(\r\n        <div className= \"align-items-center bg-header jumbotron header-hgt header-pad head-mar-top nav-shadow neon text-center yx-auto text-center\">\r\n            <h1 className=\"flicker-1 header-font\">\r\n                Click an image to earn point but don't click more than once!\r\n            </h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nfunction Navbar({ message, score, topScore }){\r\n    return(\r\n        <nav className=\"bg-nav fixed-top navbar nav-height nav-shadow p-0 tp-text\">\r\n            <ul className=\"row center list-inline m-0 nav-fill nav-height nav-width\">\r\n                <li className=\"col list-inline-item my-auto nav-calc-font p-0 m-0 text-center\">\r\n                    <a className=\"nav-calc-font navbar-brand p-0 m-0 title-line-hgt\"\r\n                    href='/'>\r\n                        Dragon Ball Z Memory Game\r\n                    </a>\r\n                </li>\r\n                <li id=\"animate-this\" className=\"col list-inline-item my-auto nav-calc-font m-0 p-0 text-center\">\r\n                    {message}\r\n                </li>\r\n                <li className=\"col list-inline-item my-auto nav-calc-font m-0 p-0 score-li-width text-center\">\r\n                    SCORE: {score} | TOP SCORE: {topScore}\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import './App.css';\nimport React, { Component } from 'react';\n\n\nimport Card from './component/Card';\nimport Footer from './component/Footer';\nimport Header from './component/Header';\nimport Navbar from './component/Navbar';\nimport tiles from './tiles.json';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isGuessCorrect: true,\n      tiles: tiles,\n      score: 0,\n      maxScore: 10,\n      topScore: 0,\n      message: 'Click an Image to begin.'\n    };\n  }\n\n  // functions for handling animation.\n\n  //remove animation CSS class\n  removeAnimation = () => {\n    let element = document.getElementById('animate-this');\n    if (this.state.isGuessCorrect) {\n      element.classList.remove('jello-vertical');\n    }\n    if (!this.state.isGuessCorrect) {\n      element.classList.remove('shake-horizontal');\n    }\n  };\n\n  //ADDs animation CSS class\n\n  addAnimation = (isCorrect) => {\n    let element = document.getElementById('animate-this');\n    if (isCorrect) {\n      element.classList.add('jello-vertical');\n    }\n    if (!isCorrect) {\n      element.classList.add('shake-horizontal');\n    }\n  };\n\n  //toggles CSS class for animation\n\n  toggleAnimation = (isCorrect) => {\n    if (isCorrect) {\n      this.addAnimation(true);\n\n      setTimeout(this.removeAnimation, 500);\n    }\n    if (!isCorrect) {\n      this.addAnimation(false);\n\n      setTimeout(this.removeAnimation, 500);\n    }\n  };\n\n  // game logic\n\n  //main click function\n\n  handleSaveClick = (id) => {\n    const tilez = this.state.tiles;\n    const tileClicked = tilez.filter((tile) => tile.id === id);\n\n    if (!tileClicked[0].clicked) {\n      tileClicked[0].clicked = true;\n\n      this.handleCorrectClick();\n\n      this.toggleAnimation(true);\n\n      this.randomizeCharacters(tilez);\n\n      this.setState({ tilez });\n    } else {\n      this.handleIncorrectClick();\n      this.toggleAnimation(false);\n    }\n  };\n\n  //function for randomization\n\n  randomizeCharacters = (characters) => {\n    characters.sort((a, b) => {\n      return 0.5 - Math.random();\n    });\n  };\n\n  //handler for correct guesses\n  handleCorrectClick = () => {\n    this.setState({ isGuessCorrect: true });\n    if (this.state.score + 1 > this.state.topScore) {\n      this.setState({ topScore: this.state.topScore + 1 });\n    }\n    if (this.state.score + 1 >= this.state.maxScore) {\n      this.setState({\n        score: this.state.score + 1,\n        message: ' You WIN! ',\n        messageClass: 'correct'\n      });\n    } else {\n      this.setState({\n        // eslint-disable-next-line react/no-direct-mutation-state\n        score: (this.state.score = 1),\n        message: 'You Guessed Correctly!',\n        messageClass: 'correct'\n      });\n    }\n  };\n\n  //handler for incorrect guesses\n  handleIncorrectClick = () => {\n    this.setState({\n      message: 'Incorrect, Play Again?',\n      isGuessCorrect: false\n    });\n\n    this.resetGame();\n  };\n\n  //resets game\n  resetGame = (is) => {\n    const tilez = this.state.tiles;\n    for (let i = 0; i < tilez.length; i++) {\n      tilez[i].clicked = false;\n    }\n    this.setState({ score: 0 });\n  };\n\n  //Render and return\n\n  render() {\n    const { message, score, tiles, topScore } = this.state;\n    return (\n      <div className='fluid-container lodge h-100vh'>\n        <Navbar\n          classname='row'\n          score={score}\n          topScore={topScore}\n          message={message}\n        />\n        <Header className='bg-header row' />\n\n        <div className='d-flex justify-content-center main-content mx-auto padding-main flex-wrap row'>\n          {tiles.map(({ id, name, image, clicked }) => (\n            <Card\n              key={id}\n              id={id}\n              name={name}\n              image={image}\n              clicked={clicked}\n              clickHandler={this.handleSaveClick}\n            />\n          ))}\n        </div>\n\n        <Footer className='footer-mgn row' />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}